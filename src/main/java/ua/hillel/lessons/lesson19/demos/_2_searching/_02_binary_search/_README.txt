
Binary Search (Бінарний пошук)
--------------------------------
Цей тип алгоритму пошуку використовується для
знаходження положення певного значення,
що міститься у відсортованому масиві.

Алгоритм бінарного пошуку працює за принципом
«розділяй та володарюй» і вважається найкращим алгоритмом
пошуку, оскільки працює швидко.

* Алгоритм принципу «розділяй та володарюй» розбиває проблему
на підзавдання, вирішує одне підзавдання та об'єднує рішення
разом, щоб отримати остаточне рішення.


Аналіз часової складності
----------------------------
Найкращий випадок виникає, коли цільовий елемент
є середнім елементом масиву.
Кількість порівнянь у цьому разі дорівнює 1.
Таким чином, часова складність дорівнює O(1).

Середній випадок. Цільовий елемент буде десь у масиві.
Таким чином, часова складність буде O(logN).

Найгірший випадок виникає, коли цільовий елемент
відсутній у списку або знаходиться далеко від середнього
елементу.
Таким чином, часова складність буде O(logN).


Розрахунок часової складності у бінарному пошуку
--------------------------------------------------
Допустимо, ітерація в бінарному пошуку завершується
після K ітерацій.

На кожній ітерації масив ділиться навпіл.
Допустимо, довжина масиву (розмір вхідних даних)
на будь-якій ітерації дорівнює N.

На ітерації 1
Length of array = N

На ітерації 2
Length of array = N/2

На ітерації 3
Length of array = (N/2)/2 = N/2^2

На ітерації K
Length of array = N/2^K

Після K поділів довжина масиву дорівнює 1:
Length of array = N⁄2^K=1 => N=2^K

Якщо ми застосуємо логарифмічну функцію
з обох сторін
log2(N)=log2(2^K) => log2(N)=Klog2(2)

Оскільки logA(A)=1, то
log2(N)=Klog2(2) => K=log2(N)

Тому часова складність бінарного пошуку
дорівнює log2(N) або O(logN).

