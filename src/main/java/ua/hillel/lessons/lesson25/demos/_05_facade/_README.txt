
Фасад (Facade)
----------------
НАДАЄ простий інтерфейс до складної системи класів,
бібліотеці чи фреймворку.

ЗАБЕЗПЕЧУЄ уніфікований інтерфейс для набору інтерфейсів
у підсистемі. Facade визначає інтерфейс вищого рівня,
який полегшує використання підсистеми.

ПРИХОВУЄ складності системи та надає клієнту інтерфейс,
за допомогою якого клієнт може отримати доступ до системи.

Включає один клас, який надає спрощені методи, потребуємі
клієнтом, і делегує виклики існуючих методів системних
класів.


Використовуємо Facade КОЛИ:
 - Хочемо надати простий інтерфейс для складної підсистеми.
Підсистеми часто стають складнішими в міру розвитку. Більшість
шаблонів, коли вони застосовані, призводять до більшої кількості
менших класів. Це робить підсистему більш багаторазовою та легшою
для налаштування (кастомізації), але її також стає важче використовувати
для клієнтів, яким не потрібно її налаштовувати. Фасад може забезпечити
простий вигляд підсистеми за замовчуванням, який є достатнім для
більшості клієнтів. Лише клієнтам, які потребують додаткових
налаштувань, доведеться дивитися за межі фасаду.
 - Існує багато залежностей між клієнтами та класами реалізації
абстракції. Вводимо фасад, щоб відокремити підсистему від клієнтів
та інших підсистем, сприяючи таким чином незалежності та переносимості
підсистеми.
 - Хочемо розшарувати свої підсистеми. Використовуємо фасад, щоб
визначити точку входу до кожного рівня підсистеми. Якщо підсистеми
є залежними, то можна спростити залежності між ними, змусивши їх
спілкуватися одна з одною виключно через їхні фасади.


Демо
------
Для виробництва продукції, різні робочі спеціалізуються на власних
послідовних операціях (A -> B -> C). Кожен з цих робочих просинається
враці, іде на завод, після, іде додому, спить.

