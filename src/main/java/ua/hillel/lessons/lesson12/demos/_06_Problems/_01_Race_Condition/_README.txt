
Race condition (Стан/Умова перегонів)
==========================================

Стан перегонів - проблема багатопоточності, яка може
виникнути усередині критичної секції.

Критична секція – секція коду, яка виконується
кількома потоками та в якій послідовність виконання
потоків впливає на результат одночасного виконання
критичної секції.

Коли результат кількох потоків, що виконують
критичну секцію, може різнитися залежно
від послідовності, в якій виконуються потоки,
кажуть, що критична секція містить стан перегонів.

Термін «Стан перегонів» походить від метафори, згідно
якої потоки проходять через критичну секцію та
результат цих перегонів впливає на результат виконання
критичної секції.


Типи стану перегонів
------------------------
Стан перегонів може виникнути, коли два або більше
потоків читають і записують одну і ту ж змінну у
відповідності до одного з двох шаблонів:
- Читання-зміна-запис (Read-modify-write)
- Перевірте, а потім дійте (Check-then-act)


Шаблон читання-зміна-запис означає, що два або
більше потоків спочатку читають задану змінну, потім
змінюють її значення та записують його назад у змінну.

Щоб це не викликало проблем, нове значення має так чи
інакше залежати від попереднього значення.

Проблема, яка може виникнути, полягає в тому, що якщо
два потоки читають значення (у регістри ЦП), потім
змінюють значення (у регістрах ЦП), а потім записують
значення назад.

Шаблон перевірити-потім-діяти означає, що два або більше
потоків перевіряють задану умову, наприклад, якщо Map
містить задане значення, а потім продовжують діяти на
основі цієї інформації, наприклад, беручи значення з Map.

Проблема може виникнути, якщо два потоки одночасно перевіряють
Map на наявність заданого значення - бачать, що значення є - і
потім обидва потоки намагаються взяти (видалити) це значення.
Однак фактично прийняти значення може лише один із потоків.
Інший потік поверне значення null.

Це також може статися, якщо замість Map використовувати Queue.


Запобігання станам перегонів
---------------------------------
Щоб запобігти виникненню станів перегонів, треба переконатися,
що критична секція виконується як атомарна інструкція.
Це означає, що коли один потік виконує її, ніякі інші потоки
не можуть її виконати, доти поки перший потік не залишить
критичну секцію.

Стан перегонів можна уникнути за рахунок належної синхронізації
потоків у критичних секціях.

Синхронізація потоків може бути досягнута за допомогою
синхронізованого блоку коду Java.

Синхронізацію потоків також можна досягти за допомогою інших
конструкцій синхронізації, таких як блокування або атомарні
змінні, такі як java.util.concurrent.atomic.AtomicInteger.

