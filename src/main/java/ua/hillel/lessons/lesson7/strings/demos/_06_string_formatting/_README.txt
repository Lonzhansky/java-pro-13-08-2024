
Форматування рядків
----------------------
Форматування рядків - процес вставки рядка або змінної
в попередньо визначений текст.

Форматування рядків використовує процес інтерполяції рядків
(підстановка змінної) для оцінки рядкового літералу, який містить
один або більше заповнювачів, що дає результат, у якому заповнювачі
замінюються відповідними значеннями.

Є декілька підходів до форматування рядків в Java.

Метод String.format() використовується для форматування об’єктів класу
String відповідно до певного формату або локалі. Цей метод повертає
новий рядок, який є результатом операції форматування.

Синтаксиси методу String.format():
public static String format(String format, Object... args)
public static String format(Locale loc, String format, Object... args)

String format - рядок для форматування.
Locale loc -  локаль, застосована під час форматування.
Однак якщо вона є null, локалізація не застосовується.
Object... args - параметр, на який посилаються специфікатори формату
у форматі String. Якщо аргументів більше, ніж специфікаторів формату,
додаткові аргументи ігноруються. Кількість аргументів може змінюватись
і може бути повністю пропущена.

Перелік та опис специфікаторів формату можна знайти за посиланням
https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html
в розділі Conversions.


Метод String.formatted() був представлений у Java 15 для форматування
екземпляра класу String за допомогою наданих аргументів.
Цей метод еквівалентний String.format() із стандартною локалізацією,
за винятком того, що його потрібно викликати на вже оголошеному екземплярі
класу String.
Метод String.formatted() було додано, як покращення зручності використання
текстових блоків.


Class Formatter забезпечує загальні формати для числових, рядкових
даних і даних дати/часу, а також виведення, що залежить від локалі.
Щоб безпосередньо використовувати Class Formatter, потрібно створити
новий екземпляр за допомогою конструктора цього класу.
https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html


Використання System.out.printf() забезпечує безпосередній друк (виведення)
вмісту у стандартний вихідний потік. Тут використовуються можливості
Class PrintStream, який додає функціональність до іншого потоку виводу,
а саме можливість зручно друкувати представлення різних значень даних.

System.out надає об’єкт PrintStream, який перетворюється на стандартне
виведення.
https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html

Метод printf() використовує ті ж базові принципи, що й метод String.format(),
оскільки обидва ці методи внутрішньо використовують Class Formatter для
форматування рядків.


Class DecimalFormat — підклас Class NumberFormat, який форматує
десяткові числа за допомогою попередньо визначених шаблонів.
https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html


