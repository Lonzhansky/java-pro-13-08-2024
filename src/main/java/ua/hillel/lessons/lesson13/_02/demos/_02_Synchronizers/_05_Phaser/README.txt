
Class Phaser (Фазер)
https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html

Подібно CountDownLatch і CyclicBarrier, Phaser представляє
собою багаторазовий бар'єр, але пропонує велику гнучкість.
Кількість зареєстрованих сторін не фіксується під час
створення в Phaser.

Phaser в Java також є бар'єром синхронізації, таким як
CountDownLatch і CyclicBarrier, ДЕ потоки повинні чекати біля бар'єру,
поки всі потоки не досягнуть бар'єру, тобто коли бар'єр вимкнено.

Phaser ЗАБЕЗПЕЧУЄ велику гнучкість за рахунок синхронізації потоків
на кількох етапах.

На кожному етапі ПОТОКИ МОЖУТЬ БУТИ динамічно зареєстровані та
не зареєстровані.

ВИКОРИСТОВУЮЧИ Phaser, можемо синхронізувати кілька фаз, повторно
використовуючи той самий екземпляр Phaser.

ЯК ТІЛЬКИ всі потоки, зареєстровані для фази, досягають бар'єру,
ця фаза вважається завершеною і починається наступна фаза.

МОЖНА використовувати Phaser для синхронізації однієї фази, але він більше
корисний, коли використовується для синхронізації кількох фаз.


Робота Phaser
---------------
Спершу потрібно Створити екземпляр Phaser.

ЗАРЕЄСТРУВАТИ учасників за допомогою Phaser, викликавши метод register(),
також можна використовувати конструктор, в якому як аргумент
передається кількість учасників.

Щоб СИГНАЛІЗУВАТИ про те, що група прибула у фазу, необхідно
викликати один із методів arrive().
ЯК ТІЛЬКИ всі зареєстровані сторони досягли фази, ця фаза
вважається завершеною.

Кожне покоління фазера має пов'язаний з ним номер фази.
Номер фази ПОЧИНАЄТЬСЯ з нуля і збільшується, коли всі сторони
досягають фазера.
