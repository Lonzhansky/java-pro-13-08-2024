
Custom Exceptions
===================

Кастомні винятки надають інформацію або функціонал, які не є частиною
стандартних винятків Java.

Стандартні винятки охоплюють майже всі загальні типи винятків, які можуть
виникнути під час роботи програми. Однак, іноді нам потрібно створювати
власні (кастомні) винятки.

Створення кастомного винятку відоме як винятки, що налаштовується.
По суті, кастомні винятки використовуються для налаштування винятку
відповідно до потреб користувача, специфічної частини проекту.

Кастомний виняток повинен забезпечити конкретику щодо певного
конкретного функціоналу або контексту розробки, коли стандартні винятки
цього не надають. Користувачам програми або розробникам корисно розуміти,
у чому саме полягає проблема, наприклад, конкретної бізнес-логіки.

В Java можемо створювати кастомні винятки, які є похідними від класів
Exception та RuntimeException. Class Exception та Class RuntimeException
надають відповідні конструктори, які можуть мати певні параметри для опису
винятку, у тому числі Throwable параметр, який більш детально має описувати
причину винятку. Перехоплений виняток зазвичай містить важливу детальну
інформацію, яка може знадобитися для аналізу специфічної виняткової ситуації.

https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Exception.html
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/RuntimeException.html

Коли реалізуємо ПЕРЕВІРЯЄМИЙ виняток, потрібно розширити клас Exception
для створення власного класу винятків. Також необхідно надати метод
конструктора, який має відповідний(і) параметр(и) та встановлює його/їх
для суперкласу.

Коли реалізуємо НЕПЕРЕВІРЯЄМИЙ виняток, потрібно розширити клас RuntimeException
для створення власного класу винятків. Також необхідно надати метод
конструктора, який має відповідний(і) параметр(и) та встановлює його/їх
для суперкласу.

Якщо кастомний виняток, здебільшого, пов’язаний із бізнес-логікою,
можна віддати перевагу тому, щоб зробити його неперевіряємим винятком
(розширити від класу RuntimeException). Це може вести до чистішого коду,
оскільки не доведеться перехоплювати винятки на кожному рівні.

